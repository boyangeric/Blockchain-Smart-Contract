{
	"compiler": {
		"version": "0.8.18+commit.87f61d96"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "friendAddress",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "name",
						"type": "string"
					}
				],
				"name": "addFriend",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "addFriendTwiceFailure",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "name",
						"type": "string"
					}
				],
				"name": "addRestaurant",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "addRestaurantTwiceFailure",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "beforeAll",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "contractActive",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "createPhase",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "deactivateContract",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "deactivateContractFailure",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "deactivateContractTest",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "deadlineBlockNumber",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "restaurant",
						"type": "uint256"
					}
				],
				"name": "doVote",
				"outputs": [
					{
						"internalType": "bool",
						"name": "validVote",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "friends",
				"outputs": [
					{
						"internalType": "string",
						"name": "name",
						"type": "string"
					},
					{
						"internalType": "bool",
						"name": "voted",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "invalidVote",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "lunchVenueTest",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "manager",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "managerTest",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "numFriends",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "numRestaurants",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "numVotes",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "blocks",
						"type": "uint256"
					}
				],
				"name": "openVoting",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "openVotingPhase",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "restaurantExist",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "restaurants",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "setFriend",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "setFriendFailure",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "setRestaurant",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "setRestaurantFailure",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "vote",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "vote2",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "vote3",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "vote4",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "voteAfterClosedFailure",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "voteClosed",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "voteFailure",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "voteForInvalidRestaurant",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "voteOpen",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "voteOpenTest",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "voteState",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "voteTwiceFailure",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "votedRestaurant",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "votes",
				"outputs": [
					{
						"internalType": "address",
						"name": "voterAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "restaurant",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"addFriend(address,string)": {
					"params": {
						"friendAddress": "Friend ’s account / address",
						"name": "Friend ’s name"
					},
					"returns": {
						"_0": "Number of friends added so far"
					}
				},
				"addRestaurant(string)": {
					"params": {
						"name": "Restaurant name"
					},
					"returns": {
						"_0": "Number of restaurants added so far"
					}
				},
				"doVote(uint256)": {
					"params": {
						"restaurant": "Restaurant number being voted"
					},
					"returns": {
						"validVote": "Is the vote valid ? A valid vote should be from a registered end to a registered restaurant"
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"addFriend(address,string)": {
					"notice": "Add a new friend to voter list"
				},
				"addFriendTwiceFailure()": {
					"notice": "ISSUE 2: Try to add the same friend twice. This should fail"
				},
				"addRestaurant(string)": {
					"notice": "Add a new restaurant"
				},
				"addRestaurantTwiceFailure()": {
					"notice": "ISSUE2: Try to add the same restaurant twice. This should fail"
				},
				"beforeAll()": {
					"notice": "’beforeAll ’ runs before all other tests More special functions are : ’beforeEach ’, ’beforeAll ’, ’afterEach ’ & ’afterAll ’"
				},
				"deactivateContractFailure()": {
					"notice": "Test deactivation fails when sender is not the manager #sender: account-1"
				},
				"deactivateContractTest()": {
					"notice": "Test only manager can deactivate the contract #sender: account-0"
				},
				"doVote(uint256)": {
					"notice": "Vote for a restaurant"
				},
				"invalidVote()": {
					"notice": "#sender: account-1"
				},
				"lunchVenueTest()": {
					"notice": "Verify lunch venue is set correctly"
				},
				"managerTest()": {
					"notice": "Check manager account -0 is the default account that deploy contract , so it should be the manager (i.e., acc0 )"
				},
				"setFriend()": {
					"notice": "Set friends as account-0 #sender doesn ’t need to be specified explicitly for account -0"
				},
				"setFriendFailure()": {
					"notice": "Try adding friend as a user other than manager . This should fail"
				},
				"setRestaurant()": {
					"notice": "Add restuarant as manager When msg.sender isn ’t specified , default account (i.e., account -0) is the sender"
				},
				"setRestaurantFailure()": {
					"notice": "Try to add a restaurant as a user other than manager . This should fail #sender: account-1"
				},
				"vote()": {
					"notice": "Vote as Bob ( acc1 ) #sender: account-1"
				},
				"vote2()": {
					"notice": "Vote as Charlie #sender: account-2"
				},
				"vote3()": {
					"notice": "Vote as Eve #sender: account-3"
				},
				"voteAfterClosedFailure()": {
					"notice": "Verify voting after vote closed . This should fail"
				},
				"voteFailure()": {
					"notice": "Try voting as a user not in the friends list . This should fail #sender: account-4"
				},
				"voteForInvalidRestaurant()": {
					"notice": "Vote for non-existent restaurant as Charlie ( acc2 ) #sender: account-2"
				},
				"voteOpenTest()": {
					"notice": "Verify voting is now closed"
				},
				"voteTwiceFailure()": {
					"notice": "Try voting twice as the same user (Bob). The second vote should fail #sender: account-1"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"tests/LunchVenue_updated_test.sol": "LunchVenueTest"
		},
		"evmVersion": "paris",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/LunchVenue_updated.sol": {
			"keccak256": "0xae475b558c6114f4b69c9a979b35399c75dcd70da4c1bc700e651a320bd3760c",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://c1c4d02bfbc99fb5938c433b048b7246e881db79fab77de0f1b578d3674316b5",
				"dweb:/ipfs/Qmcfnmi2RNQtQ3c3SfA4SVDwfmFx1ePaRBg3Zo1SDe1ozM"
			]
		},
		"remix_accounts.sol": {
			"keccak256": "0xab088ffd1cd1033f54c2486f151b5d02281a3b76724c8e6f48479c25a4f7809e",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://5ddaf9976b1838f7028cbedfaf7f6e1cf8c898e100221176ff1406ee8b599f23",
				"dweb:/ipfs/QmX2FYLXYyo5Cn55ZX2CfngpscSh4mQhcMVzQdQsh2vqcG"
			]
		},
		"remix_tests.sol": {
			"keccak256": "0xe2783cdc204cba8c72494119339f1d90f9022b15d6c718c668b7f097d8e29787",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://bb6a22e64c7f16bcaab63b1c1a1b269d5be8a6d37bdd9dec1718477ab916b18e",
				"dweb:/ipfs/QmdkW1tT5iadBvaHMCoskhDGZKnfdg8o1D9CcoQYtdJet7"
			]
		},
		"tests/LunchVenue_updated_test.sol": {
			"keccak256": "0x89642f7fcaf1ad4df5c94d00d3721af4ab6fff8d72f6900056a510d06d17e35b",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://d2d1c29e825f38e37dff2989c71a8f35eb2be7a8a0aa20cae35435c3d712731e",
				"dweb:/ipfs/QmdVV59H6Fdbnqg4H2pTVSZJ9dfbjxpW1mvh8VbtcSKi5k"
			]
		}
	},
	"version": 1
}